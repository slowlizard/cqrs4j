#summary Getting started guide
#labels Featured


<wiki:toc min_depth="1" />
= Obtaining necessary libraries =
== Configuring maven ==

Add the following code in your dependencies section:
{{{
<dependency>
  <groupId>nl.gridshore.cqrs4j</groupId>
  <artifactId>cqrs4j</artifactId>
  <version>0.1</version>
</dependency>
}}}

Make sure your maven installation has access to the cqrs4j repository, where the necessary jars and poms are located. 

If you use a repository proxy, such as Artifactory, configure the following url:
`http://cqrs4j.googlecode.com/svn/repo`

You can also add a repository configuration to you pom.xml:

{{{
<repositories>
  <repository>
    <id>cqrs4j</id>
    <url>http://cqrs4j.googlecode.com/svn/repo</url>
  </repository>
</repositories>
}}}

== Additional dependencies ==

Most of the features provided by the _cqrs4j_ framework are optional and require additional dependencies. We have chosen not to add these dependencies by default, as they would possibly clutter your project with stuff you don't need.

Below is a table of additional features and the extra dependencies you need:
|| *Feature* || *Dependency* ||
|| [EventSourcing Event sourcing] || com.thoughtworks.xstream:xstream:1.3.1 ||
|| [TransactionalHandlers Transaction aware event handler adapters] || org.springframework:spring-tx:3.0.0.RELEASE ||
|| [SpringIntegrationSupport Spring Integration support] || org.springframework.integration:spring-integration-core:1.0.3.RELEASE |||

Note: the version numbers are the ones _cqrs4j_ has been tested with. Other versions might work, but might not.
= Creating the CQRS building blocks =
== Building an Aggregate ==
All aggregates should implement the `AggregateRoot` interface. This interface describes that basic operations needed by the Repository to store and publish the generated events.

To support you with the implementation, there are two abstract implementations of this interface: `AbstractAggregateRoot` and `AbstractAnnotatedAggregateRoot`. 

The first is a basic implementation that requires you to override the `handle` method to implement the state change logic. This abstract class provides an `apply` method that you can call in your business logic method to have an event applied. The `AbstractAggregateRoot` will keep track of all uncommitted applied events and make shure they are forwarded to the `EventBus` when the aggregate is saved.

The `AbstractAnnotatedAggregateRoot` is a specialization of the `AbstractAggregateRoot` that provides `@EventHandler` annotation support to your aggregate. See AnnotationSupport for more information.

== Building a repository ==
All repositories should implement the `Repository` interface. Again, there is an abstract implementation to support with the most common repository implementation tasks: `AbstractEventSourcingRepository`.

As the name implies, this repository implementation helps you if you would like to apply event sourcing. Implementations of this abstract repository only need the logic to initialize an aggregate (for which `AbstractAggregateRoot` provides utility methods).

This abstract repository needs an `EventStore` implementation to physically store events. There is currently one implementation available: `XStreamFileSystemEventStore`, but you can easily create your own.

The `XStreamFileSystemEventStore` serializes events using XStream (to XML) and streams them to the filesystem. Each aggregate will have a file containing the events generated by that aggregate.

== Creating event listeners ==


== Choosing an EventBus ==
The `EventBus` is the mechanism that dispatches events to the event listeners.