<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010. Gridshore
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter id="annotation-support" xmlns="http://docbook.org/ns/docbook">
    <title>Annotation Support</title>

    <para>
        We strongly believe in the POJO programming model. Furthermore, the goal of cqrs4j is to relieve you of any
        plumbing and boilerplate coding. The annotation support features of cqrs4j allow you to build plain event
        listeners (just extending object) and annotating the relevant event handling methods with
        <code>@EventHandler</code>.
    </para>

    <sect1>
        <title>Annotation support for aggregates</title>

        <para>Annotation support is automatically available to all aggregates that extend
            <code>AbstractAnnotatedAggregateRoot</code>.
        </para>
        <para>See
            <xref linkend="annotated-event-handler"/>
            for information about the signature of annotated event handler methods.
        </para>
        <para>Here is an example of a simple aggregate using annotation support:</para>
        <programlisting language="java"><![CDATA[public class Customer extends AbstractAnnotatedAggregateRoot {

    public Customer(Address address, String name) {
    apply(new NewCustomerEvent(address, name));
    }

    @EventHandler
    protected void onNewCustomer(NewCustomerEvent newCustomerEvent) {
        // do the state changes
    }
}]]></programlisting>
    </sect1>
    <sect1 id="annotated-event-handler">
        <title>Creating an annotated event handler</title>
        <para>Creating an annotated event listener is pretty easy. You don't need to extend any special classes. All you
            need to do is annotate any methods that you want called when en event comes in with the
            <code>@EventHandler</code>
            annotation.
        </para>
        <para>There are, however, a few rules for these methods:
            <itemizedlist mark="bullet">
                <listitem>
                    <para>The method must accept 1 or 2 parameters. The first parameter must be a subtype of
                        <code>DomainEvent</code>. The second (optional) parameter is of type
                        <code>TransactionStatus</code>. See <xref linkend="transaction-support"/>.
                    </para>
                </listitem>
                <listitem>Return values are allowed, but are ignored by dispatchers.</listitem>
                <listitem>Exceptions are highly discouraged, and are likely to be caught and ignored by the
                    dispatchers
                </listitem>
            </itemizedlist>
        </para>
        <programlisting language="java"><![CDATA[//Examples of valid event handler signatures:
public void onSomeEvent(SomeEvent event)
public Object onSomeEvent(SomeEvent event)

//Good, but highly discouraged:
public void onSomeEvent(SomeEvent event) throws SomeCheckedException

//Wrong:
public void onSomeEvent(SomeEvent event, SomeOtherInformation info)
public void onSomeEvent(DoesNotExtendDomainEvent event)
]]></programlisting>

        <para>Once the annotation bean post processor (<code>AnnotationEventListenerBeanPostProcessor</code>) is defined
            in the spring application context, all you need to to is add the bean definitions of your annotated event
            listeners to the context. That's it.
        </para>
        <para>
            Alternatively, you can wrap each annotated bean in a <code>AnnotationEventListenerAdapter</code>.
        </para>
    </sect1>

</chapter>